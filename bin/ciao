#!/usr/bin/env node

var path = require( 'path' );
var coffee = require( 'coffee-script' );
var Script = require( '../lib/Script' );
var Runner = require( '../lib/Runner' );
var Reporter = require( '../lib/Reporter' );
var Documentor = require( '../lib/Documentor' );
var Request = require( '../lib/Request' );
var Settings = require( '../lib/Settings' );
var Suite = require( '../lib/Suite' );
var program = require('commander');

program
  .version('0.1.4')
  .usage('[options] <file ...>')
  .option('-c, --conf [dir]', 'an additional config file to load after ciao.json')
  .option('-s, --silent', 'disable reporters')
  .option('-v, --verbose', 'report full requests and responses on error')
  .option('-d, --documentation [dir]', 'generate documentation in output dir')
  .parse(process.argv);

basesettings = new Settings();
basesettings.loadFromFile( 'ciao.json', true );
if( program.conf ){ basesettings.loadFromFile( program.conf ); }

var suite = new Suite( function( filename, suite )
{
  settings = new Settings();
  settings.merge( basesettings );

  Script.load( filename, settings, function( settings, parser )
  {
    if( parser.sections.request[0] ){
      var runner = new Runner( parser.sections.assert );
      
      // Set Reporter
      if( !program.silent ){
        runner.listener( Reporter.standard );
        // runner.listener( Reporter.request );
        // runner.listener( Reporter.debug );
        if( program.verbose ){
          runner.listener( Reporter.reqRes );
        }
      }

      // HTTP Request
      var http = new Request();
      http.listener( runner.complete );

      // Documentation
      if( program.documentation )
      {
        filename = path.resolve( filename );
        var docTarget = filename.replace( process.cwd(), process.cwd() + '/' + program.documentation );
        var docFile = docTarget.replace( '.coffee', '.md' );
        var documentation = new Documentor( parser.sections.request[0].title, docFile );
        runner.listener( documentation.documentTest );
        http.listener( documentation.documentTransaction );
      }

      // Send the Request
      http.transfer( settings.defaults );
    }
  });
});

// Run script(s)
if( program.args[0] ){
  suite.walk( program.args[0] );
}
else {
  program.help();
}