{
  "name": "spooks",
  "version": "0.5.0",
  "author": {
    "name": "Phil Booth",
    "email": "pmbooth@gmail.com"
  },
  "description": "A small and simple library for creating unit test spies and mock objects.",
  "contributors": {
    "name": "Phil Booth",
    "email": "pmbooth@gmail.com"
  },
  "main": "./src/spooks.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/philbooth/spooks.js"
  },
  "keywords": [
    "unit",
    "test",
    "assert",
    "spy",
    "spies",
    "double",
    "mock",
    "fake",
    "dummy",
    "stub"
  ],
  "jam": {
    "main": "src/spooks.js"
  },
  "devDependencies": {
    "jake": "0.5.x",
    "jshint": "0.9.x",
    "mocha": "1.7.x",
    "chai": "1.4.x",
    "uglify-js": "2.2.x"
  },
  "license": "MIT",
  "scripts": {
    "test": "jake test"
  },
  "readme": "# spooks.js\n\nA small and simple library\nfor creating unit test spies and mock objects\nin JavaScript.\n\n[![Build status][ci-image]][ci-status]\n\n## Installation\n\n### Node.js\n\n```\nnpm install spooks\n```\n\n### Browser\n\n```\ngit clone git@github.com:philbooth/spooks.js.git\n```\n\nOr use one of the growing number of package managers, such as\n[Jam][jam],\n[Bower][bower]\n(the package name for both is 'spooks')\nor [Component][component] ('philbooth/spooks.js').\n\n## Usage\n\n### Loading the library\n\n#### Node.js\n\n```\nvar spooks = require('spooks');\n```\n\n#### Browser\n\n```\n<script type=\"text/javascript\" src=\"spooks.js/src/spooks.min.js\"></script>\n```\n\n### Calling the exported functions\n\nFour functions are exported:\n`spooks.fn`, `spooks.obj`, `spooks.ctor` and `spooks.mode`.\n\n#### spooks.fn (options)\n\nReturns a spy function,\nbased on the properties of the `options` argument.\n\n`options.name` must be a string identifying the function,\nto be used when fetching the count,\narguments\nor contexts\nof calls to the returned spy function.\nYou probably want this to match\nthe actual name of the function,\nalthough it doesn't have to\n(for example,\nyou may need to avoid name clashes\nwith other properties on the log object).\n\n`options.log` must be a non-null object\nthat will be used to store the count of calls made to the spy,\nany arguments passed to it\nand the `this` context for each call,\non the `counts[name]`,\n`args[name]`\nand `these[name]`\nproperties respectively.\n\n`options.chain` is an optional boolean\nthat can be used to indicate that\nthe returned spy function should support chaining\n(i.e. return it's own `this` when invoked).\n\n`options.result` is an optional result\nthat will be returned by the returned spy function\n(ignored if `chain` is `true`).\n\ne.g. to mock the `setTimeout` function:\n\n```\n// Create the spy function.\nvar log = {}, originalSetTimeout = setTimeout;\nsetTimeout = spooks.fn({\n    name: 'setTimeout',\n    log: log\n});\n\n// Perform some test setup.\n...\n\n// Assert that the spy was called as expected.\nassert.strictEqual(log.counts.setTimeout, 1);\nassert.lengthOf(log.args.setTimeout[0], 2);\nassert.isFunction(log.args.setTimeout[0][0]);\nassert.strictEqual(log.args.setTimeout[0][1], 1000);\n\n// Reinstate the original function.\nsetTimeout = originalSetTimeout;\n```\n\n#### spooks.obj (options)\n\nReturns a mock object,\ncontaining spy methods\nbased on the properties of the `options` argument.\n\n`options.archetype` must be a non-null object\nthat will be used as a template\nfrom which to define the mock object.\n\n`options.mode` is an optional mode constant,\nas returned by the function `spooks.mode`,\nthat indicates precisely which properties from the archetype\nshould be mocked.\nSee the documentation for `spooks.mode`,\nfurther down in this document,\nfor more information about mocking modes.\n\n`options.log` must be a non-null object\nthat will be used to store counts of spy method calls,\nany arguments passed to those methods\nand the `this` context for each call,\non the `counts`, `args` and `these` properties respectively.\n\n`options.spook` is an optional object\nthat can be used as the base mock object\nto augment with spy methods.\nIf it is not specified,\na fresh mock will be returned instead.\n\n`options.chains` is an optional object\ncontaining boolean flags that indicate whether\nspy methods should support chaining.\nThe flags are keyed by method name.\n\n`options.results` is an optional object\ncontaining values that will be returned\nfrom spy methods.\nThe values are keyed by method name.\n\ne.g. to mock jQuery:\n\n```\n// Create the mock object.\nvar log = {},\njqElement = spooks.obj({\n    archetype: jQuery('body'),\n    log: log\n});\n$ = spooks.fn({\n    name: 'jQuery',\n    log: log,\n    result: jqElement\n});\nspooks.obj({\n    archetype: jQuery,\n    log: log,\n    spook: $\n});\n\n// Perform some test setup.\n...\n\n// Assert that the spies were called as expected.\nassert.strictEqual(log.counts.jQuery, 1);\nassert.lengthOf(log.args.jQuery[0], 1);\nassert.strictEqual(log.args.jQuery[0][0], '#input-user-id');\nassert.strictEqual(log.counts.ajax, 1);\nassert.lengthOf(log.args.ajax[0], 2);\nassert.strictEqual(log.args.ajax[0][0], '/users/1.json');\nassert.isObject(log.args.ajax[0][1]);\n\n// Reinstate the original object.\n$ = jQuery;\n```\n\n#### spooks.ctor (options)\n\nReturns a spy constructor,\nwhich itself returns mock instances\nthat contain spy methods\nbased on the properties of the `options` argument.\n\n`options.name` must be a string identifying the constructor,\nto be used when fetching the count,\narguments\nor contexts\nof calls to the returned spy function.\nYou probably want this to match\nthe actual name of the function,\nalthough it doesn't have to\n(for example,\nyou may need to avoid name clashes\nwith other properties on the log object).\n\n`options.log` must be a non-null object\nthat will be used to store the count of calls made to the constructor,\nany arguments passed to it\nand the `this` context for each call,\non the `counts[name]`,\n`args[name]`\nand `these[name]`\nproperties respectively.\n\n`options.archetype` must be an object\ncontaining properties that define\nhow to construct the mock instances\nthat will be returned by the constructor.\nIt must have either the property `instance`,\nan object that will be used as the template for mock instances,\nor the property `ctor`,\na function that returns the template\n(usually this would be the original constructor that is being mocked).\nIf `ctor` is specified\nthe array property `args` may also be set\nto specify any arguments which must be passed to that function.\n\n`options.mode` is an optional mode constant,\nas returned by the function `spooks.mode`,\nthat indicates precisely which properties from the archetype\nshould be mocked.\nSee the documentation for `spooks.mode`,\nfurther down in this document,\nfor more information about mocking modes.\n\n`options.chains` is an optional object\ncontaining boolean flags that indicate whether\nspy methods of the mock instances should support chaining.\nThe flags are keyed by method name.\n\n`options.results` is an optional object\ncontaining values that will be returned\nfrom spy methods of the mock instances.\nThe values are keyed by method name.\n\ne.g. to mock `Task` instances from your model layer:\n\n```\n// Create the spy constructor.\nvar log = {}, originalTask = Task;\nTask = spooks.ctor({\n\tname: 'Task',\n\tlog: log,\n\tarchetype: {\n\t\tctor: Task\n\t},\n\tresults:\n\t\tisDone: false\n\t}\n});\n\n// Perform some test setup.\n...\n\n// Assert that the spies were called as expected.\nassert.strictEqual(log.counts.Task, 1);\nassert.lengthOf(log.args.Task[0], 0);\nassert.strictEqual(log.counts.isDone, 1);\n\n// Reinstate the original object.\nTask = originalTask;\n```\n\n#### spooks.mode (modes)\n\nReturns a mode constant\nthat can be used to modify the mocking behaviour of the other functions.\n\n`modes` must be a string\ncontaining a comma-separated list of desired modes,\ncombined in any order.\nValid modes are 'wide', 'deep' and 'heavy'.\nWhitespace is ignored.\n\nThe deault mode,\nassumed by every function in the absence of these constants,\nis to mock only the archetype's own function properties.\nThat is to say,\nany properties of the archetype\nwhich are not functions\nor are inherited from the prototype chain\nwill not be mocked.\n\n`wide` indicates that\nmock objects will be assigned copies\nof the archetype's value properties\n(strings, numbers, booleans)\nin addition to its functions.\n\n`deep` indicates that\nmock objects will be given a deep-cloned copy\nof any object properties on the archetype.\n\n`heavy` indicates that\nmock objects will be given copies\nof properties from the archetype's prototype chain.\n\nAll combination of these modes are valid.\nAny modes not recognised will cause an exception to be thrown.\n\n## Development\n\n### Dependencies\n\nThe build environment relies on\n[Node.js][node],\n[NPM],\n[Jake],\n[JSHint],\n[Mocha],\n[Chai] and\n[UglifyJS].\nAssuming that you already have Node.js and NPM set up,\nyou just need to run `npm install`\nto install all of the dependencies\nas listed in `package.json`.\n\n### Unit tests\n\nThe unit tests are in `test/spooks.js`.\nYou can run them with the command `npm test`\nor `jake jstest`.\n\n[ci-image]: https://secure.travis-ci.org/philbooth/spooks.js.png?branch=master\n[ci-status]: http://travis-ci.org/#!/philbooth/spooks.js\n[jam]: http://jamjs.org/\n[ender]: https://github.com/ender-js/Ender\n[bower]: https://github.com/twitter/bower\n[component]: https://github.com/component/component\n[node]: http://nodejs.org/\n[npm]: https://npmjs.org/\n[jake]: https://github.com/mde/jake\n[jshint]: https://github.com/jshint/node-jshint\n[mocha]: http://visionmedia.github.com/mocha\n[chai]: http://chaijs.com/\n[uglifyjs]: https://github.com/mishoo/UglifyJS\n\n",
  "_id": "spooks@0.5.0",
  "dist": {
    "shasum": "a99272cb9c85b5bc35d9b029d65d57af187756cc"
  },
  "_from": "spooks@0.5.x"
}
